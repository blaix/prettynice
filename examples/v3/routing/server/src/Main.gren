module Main exposing (main)

import Node exposing (Environment)
import Prettynice
import Prettynice.Request exposing (Request)
import Prettynice.Response as Response exposing (Response)
import Task exposing (Task)
import Transmutable.Html as H
import Transmutable.Html.Attributes as A


main : Prettynice.Program Model msg
main =
    Prettynice.defineProgram
        { init = init
        , router = router
        }


type alias Model = {}


init : Environment -> Prettynice.Init Model msg
init env =
    Prettynice.startProgram
        { env = env
        , host = "0.0.0.0"
        , port_ = 3000
        , model = {}
        }


router : Model -> Request -> Response msg -> Task Never (Response msg)
router model request response =
    response
        |> routeRequest request
        |> Task.succeed


routeRequest : Request -> Response msg -> Response msg
routeRequest request =
    when request.path is
        [] ->
            viewHome

        [ "about" ] ->
            viewAbout
            
        [ "users", userId ] -> 
            viewUser userId

        _ ->
            viewNotFound


viewHome : Response msg -> Response msg
viewHome =
    Response.asHtml
        { title = "Home"
        , head = []
        , body =
            [ H.h1 [] [ H.text "Home" ]
            , H.ul []
                [ H.li [] [ H.a [ A.href "/about" ] [ H.text "About" ] ]
                , H.li [] [ H.a [ A.href "/users/123" ] [ H.text "View User" ] ]
                ]
            ]
        }


viewAbout : Response msg -> Response msg
viewAbout =
    Response.asHtml
        { title = "About"
        , head = []
        , body =
            [ H.p [] [ H.text "It's a website." ]
            , H.a [ A.href "/" ] [ H.text "Home" ]
            ]
        }


viewUser : String -> Response msg -> Response msg
viewUser userId =
    Response.asHtml
        { title = "User"
        , head = []
        , body =
            [ H.p [] [ H.text ("User id: " ++ userId) ]
            , H.a [ A.href "/" ] [ H.text "Home" ]
            ]
        }


viewNotFound : Response msg -> Response msg
viewNotFound response =
    response
        |> Response.setStatus 404
        |> Response.asText "Not Found"
