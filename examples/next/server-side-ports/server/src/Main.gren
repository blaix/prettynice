port module Main exposing (main)

import Dict exposing (Dict)
import Init
import Node exposing (Environment)
import Prettynice
import Prettynice.Request exposing (Request)
import Prettynice.Response as Response exposing (Response)
import Transmutable.Html as H exposing (Html)
import Transmutable.Html.Attributes as A


-- MODEL


-- Because our outgoing and incoming ports are commands (isolated and async),
-- we need to track the request/response pairs on our model so we can respond
-- to the correct request when we get the results.


type alias Model =
    { requestId : Int
    , responses : Dict Int Response
    }


type alias UuidPortResponse =
    { requestId : Int
    , uuid : String
    }


main : Prettynice.Program Model Msg
main =
    Prettynice.defineProgram
        { init = init
        , update = update
        , subscriptions = subscriptions
        , onRequest = GotRequest
        }


init : Environment -> Prettynice.Init Model Msg
init env =
    Prettynice.startProgram
        { host = "127.0.0.1"
        , port_ = 3000
        , env = env
        , command = Cmd.none
        , model =
            { requestId = 1
            , responses = Dict.empty
            }
        }


-- UPDATE


type Msg
    = GotRequest Request Response
    | GotUuid UuidPortResponse


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        GotRequest request response ->
            { model = 
                { model 
                    | requestId = model.requestId + 1
                    , responses = 
                        model.responses 
                            |> Dict.set model.requestId response
                }
            , command =
                getUuid model.requestId
            }


        GotUuid uuidPortResponse ->
            case Dict.get uuidPortResponse.requestId model.responses of
                Just response ->
                    { model = 
                        { model
                            | responses = 
                                model.responses 
                                    |> Dict.remove uuidPortResponse.requestId
                        }
                    , command =
                        Response.sendText uuidPortResponse.uuid response
                    }

                Nothing ->
                    -- How did we get here?
                    { model = model
                    , command = Cmd.none
                    }


port getUuid : Int -> Cmd msg
port gotUuid : (UuidPortResponse -> msg) -> Sub msg


subscriptions : Model -> Sub Msg
subscriptions _ =
    gotUuid GotUuid
