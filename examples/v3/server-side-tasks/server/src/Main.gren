module Main exposing (main)

import Node exposing (Environment)
import Prettynice
import Prettynice.Request exposing (Request)
import Prettynice.Response as Response exposing (Response)
import Task exposing (Task)
import Time
import Transmutable.Html as H exposing (Html)
import Transmutable.Html.Attributes as A


main : Prettynice.Program Model msg
main =
    Prettynice.defineProgram
        { init = init
        , router = router
        }


type alias Model = {}


init : Environment -> Prettynice.Init Model msg
init env =
    Prettynice.startProgram
        { env = env
        , host = "127.0.0.1"
        , port_ = 3000
        , model = {}
        }


router : Model -> Request -> Response msg -> Task Never (Response msg)
router _ request response =
    Task.await Time.now <| \time ->
    Task.await Time.here <| \zone ->
        Task.succeed <|
            Response.asHtml (viewTimePage time zone) response


viewTimePage : Time.Posix -> Time.Zone -> { title : String, head : Array (Html msg), body : Array (Html msg) }
viewTimePage time zone =
    let
        timeString =
            [ Time.toHour zone time
            , Time.toMinute zone time
            , Time.toSecond zone time
            ]
               |> Array.map String.fromInt
               |> Array.map (String.padLeft 2 '0')
               |> String.join ":"
    in
    { title = "Time Viewer"
    , head = []
    , body =
        [ H.h1 [] [ H.text "Current Time" ]
        , H.text timeString
        ]
    } 
