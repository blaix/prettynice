module Prettynice.Response exposing 

    -- Response type
    ( Response
    , new
    , unwrap

    -- Setting response body
    , asText
    , asHtml
    , asJson
    , asBytes

    -- Setting headers and status
    , setHeader
    , setStatus

    -- Events
    , onSend
    ) 


{-| HTTP Responses

@docs Response

## Setting the Response Body

@docs asHtml, asJson, asText, asBytes

## Setting the Response headers and status

@docs setHeader, setStatus

## Event Messages

@docs onSend

## Raw HTTP Responses

Use these functions to work with a raw
[Http.Response](https://packages.gren-lang.org/package/gren-lang/node/version/latest/module/HttpServer.Response#Response)
directly. You shouldn't need them in a typical Prettynice application but if you want to do something
weird and cool I'm not going to stop you.

@docs new, unwrap
-}

import Bytes exposing (Bytes)
import HttpServer.Response as Http
import Prettynice.Internal.Response as Internal
import Prettynice.Request exposing (Request)
import Json.Encode
import Task exposing (Task)
import Transmutable.Html as H exposing (Html)
import Transmutable.Html.Attributes as A


{-| An HTTP response value.
-}
type alias Response msg =
    Internal.Response msg


{-| Custom type for response bodies.
-}
type Body msg
    = HtmlBody 
        { title : String
        , head : Array (Html msg)
        , body : Array (Html msg)
        }
    | BytesBody Bytes
    | JsonBody Json.Encode.Value
    | TextBody String


{-| Internal representation of body is either a String or Bytes
-}
type RawBody
    = RawBodyString String
    | RawBodyBytes Bytes


{-| Turn a [Node HttpServer Response](https://packages.gren-lang.org/package/gren-lang/node/version/3.1.0/module/HttpServer.Response#Response)
into a Prettynice Response.

You shouldn't need this in your normal application code.
The response you get in a Prettynice request message is already a Prettynice Response.
-}
new : Http.Response -> Response msg
new httpResponse =
    Internal.Response
        { httpResponse = httpResponse
        , appMsg = Nothing
        }


{-| Turn a Prettynice Response back into a normal [Node HttpServer Response](https://packages.gren-lang.org/package/gren-lang/node/version/latest/module/HttpServer.Response#Response)

You shouldn't need this in a typical Prettynice program.
But it's here if you want to do anything weird and cool.
-}
unwrap : Response msg -> Http.Response
unwrap (Internal.Response { httpResponse }) =
    httpResponse


{-| internal use
-}
unwrapFull : Response msg -> { httpResponse : Http.Response, appMsg : Maybe msg }
unwrapFull (Internal.Response record) =
    record


{-| Update a response to send raw bytes.

Use this to send binary data like files, images, etc.
See [the bytes example](https://github.com/blaix/prettynice/tree/main/examples/v3/bytes) for a working usage example.
-}
asBytes : { contentType : String, body : Bytes } -> Response msg -> Response msg
asBytes { contentType, body } response =
    response
        |> withBody (BytesBody body)
        |> setHeader "Content-type" contentType


{-| Update a response to send plain text.

See [the hello world example](https://github.com/blaix/prettynice/tree/main/examples/v3/hello-world) for a working usage example.
-}
asText : String -> Response msg -> Response msg
asText text =
    withBody (TextBody text)


{-| Update a response to send json.

See [the json example](https://github.com/blaix/prettynice/tree/main/examples/v3/json) for a working usage example.
-}
asJson : Json.Encode.Value -> Response msg -> Response msg
asJson json =
    withBody (JsonBody json)


{-| Update a response to send HTML.

`title` will go into the `<title>` tag,
`head` will be added to the `<head>` tag,
and `body` will go into the `<body>` tag.

Note that Prettynice uses and expects Html from [icidasset/html-gren](https://packages.gren-lang.org/package/icidasset/html-gren),
not from gren-lang/browser. The API is the same, but html-gren is needed because it supports server-side rendering.

See [the html example](https://github.com/blaix/prettynice/tree/main/examples/v3/html) for a working usage example.
-}
asHtml :
    { title : String, head : Array (Html msg), body : Array (Html msg) } 
    -> Response msg
    -> Response msg
asHtml html =
    withBody (HtmlBody html)


{-| Update a response to send the specified body.
-}
withBody : Body msg -> Response msg -> Response msg
withBody bodyVariant response =
    let
        { contentType, rawBody } =
            when bodyVariant is
                HtmlBody { title, head, body } ->
                    { contentType = "text/html"
                    , rawBody = RawBodyString <|
                        ( H.toString H.doctype ) ++ 
                        ( H.toString
                            ( H.html [ A.lang "en" ]
                                [ H.head []
                                    ( [ H.meta [ A.charset "utf-8" ]
                                      , H.meta [ A.name "viewport", A.content "width=device-width, initial-scale=1.0" ]
                                      , H.node "script" [ A.src "/main.js" ] []
                                      , H.title [ H.text title ]
                                      ] ++ head
                                    )
                                , H.body [] <|
                                    body ++
                                    [ H.node "script" []
                                        [ H.text <|
                                            """
                                            if (typeof($__components) !== 'undefined') {
                                                Object.keys($__components).map((name) => {
                                                    let path = name.replace(/\\./g, '/');
                                                    import("/" + path + ".js").then((mod) => {
                                                        if (mod.init) {
                                                            $__components[name].map((comp) => {
                                                                mod.init(comp);
                                                            });
                                                        }
                                                    });
                                                });
                                            }
                                            """
                                        ]
                                    ]
                                ]
                            )
                        )
                    }

                JsonBody json ->
                    { contentType = "application/json"
                    , rawBody = RawBodyString <| Json.Encode.encode 2 json 
                    }

                TextBody text ->
                    { contentType = "text/plain"
                    , rawBody = RawBodyString text
                    }

                BytesBody bytes ->
                    { contentType = "application/octet-stream"
                    , rawBody = RawBodyBytes bytes
                    }
        
        { httpResponse, appMsg } =
            unwrapFull response
    in
    Internal.Response
        { appMsg = appMsg
        , httpResponse =
            httpResponse
                |> Http.setHeader "Content-type" contentType
                |> ( when rawBody is
                        RawBodyString body ->
                            Http.setBody body
                        RawBodyBytes body ->
                            Http.setBodyAsBytes body
                    )
        }


{-| Add a header to the response.
-}
setHeader : String -> String -> Response msg -> Response msg
setHeader key val (Internal.Response { httpResponse, appMsg }) =
    Internal.Response
        { appMsg = appMsg
        , httpResponse =
            Http.setHeader key val httpResponse
        }


{-| Set the status of the response.
-}
setStatus : Int -> Response msg -> Response msg
setStatus status (Internal.Response { httpResponse, appMsg }) =
    Internal.Response
        { appMsg = appMsg
        , httpResponse =
            Http.setStatus status httpResponse
        }

{-| Send a message to your `update` function when a response is sent.

See the [websocket example](https://github.com/blaix/prettynice/tree/main/examples/v3/html)
for a working usage example.
-}
onSend : msg -> Response msg -> Response msg
onSend appMsg (Internal.Response { httpResponse }) =
    Internal.Response
        { httpResponse = httpResponse
        , appMsg = Just appMsg
        }
