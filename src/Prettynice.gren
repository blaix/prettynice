module Prettynice exposing 
    ( Program
    , Init
    , defineProgram
    , defineFullProgram
    , startProgram
    , startFullProgram
    )

 
{-| Use this module to define and start a Prettynice web server.

@docs Program

## Defining your program

@docs defineProgram

## Starting your pgoram

@docs Init, startProgram

## Messages, Commands, and Subscriptions

Sometimes `init` and `router` are not enough.
Maybe you need access to [commands](https://gren-lang.org/book/applications/commands/)
or [ports](https://gren-lang.org/book/applications/ports/#node-ports) on the server side.
If so, you can use these functions to create a program that includes `update` and `subscriptions`.

@docs defineFullProgram, startFullProgram

-}

import Bytes exposing (Bytes)
import FileSystem
import HttpServer as Http exposing (ServerError(..), Method(..))
import HttpServer.Response as HttpResponse 
import Init
import Node exposing (Environment, Program)
import Prettynice.Internal.Response as Internal
import Prettynice.Request exposing (Request)
import Prettynice.Response exposing (Response)
import Server.Static as Static exposing (Mode(..))
import Stream
import Task exposing (Task)
import Transmutable.Html as H
import Transmutable.Html.Attributes as A
import Url exposing (Url)


type alias Model appModel =
    { server : Maybe Http.Server
    , stdout : Stream.Writable Bytes
    , stderr : Stream.Writable Bytes
    , host : String
    , port_ : Int
    , env : Environment
    , fsPermission : FileSystem.Permission
    , appModel : appModel
    }


{-| The definition of your Prettynice program.
-}
type alias Program model msg =
    Node.Program (Model model) (Msg model msg)


{-| Init task for starting your Prettynice program.
Created with [`startProgram`](#startProgram).
-}
type alias Init model msg =
    Init.Task
        { model : Model model
        , command : Cmd (Msg model msg)
        }

{-| Define a Prettynice web server.

Servers are defined with two functions: `init` is used to [start your program](#startProgram)
and `router` will be called on every request and should return a task that resolves to a [response](Prettynice.Response).

See `server/src/Main.gren` in the [example projects](https://github.com/blaix/prettynice/tree/main/examples) for how to use this in practice.
-}
defineProgram :
    { init : Environment -> Init model msg
    , router : model -> Request -> Response msg -> Task Never (Response msg)
    } -> Program model msg
defineProgram app =
    Node.defineProgram <|
        defineFullProgramRecord <|
            { init = app.init
            , router = app.router
            , update = (\_ model -> { model = model, command = Cmd.none })
            , subscriptions = (\_ -> Sub.none)
            }

{-| Define a Prettynice web server that uses the full
[Elm Architecture](https://gren-lang.org/book/applications/tea/).

This is the same as [`defineProgram`](#defineProgram), but with the addition of
`update` and `subscription` functions. They work just like they do in a normal
[Gren node program](https://gren-lang.org/book/applications/node/#lets-make-a-web-server).

You should only need this if your server needs access to
[commands](https://gren-lang.org/book/applications/commands/)
(e.g. for [server-side ports](https://gren-lang.org/book/applications/ports/#node-ports))
or [subscriptions](https://gren-lang.org/book/applications/subscriptions/).
If you don't need them, you probably want [`defineProgram`](#defineProgram).

See `server/src/Main.gren` in [the server-side-tea example](https://github.com/blaix/prettynice/tree/main/examples/v3/server-side-tea)
for how `defineFullProgram` is used in practice.
-}
defineFullProgram :
    { init : Environment -> Init model msg
    , update : msg -> model -> { model : model, command : Cmd msg }
    , subscriptions : model -> Sub msg
    , router : model -> Request -> Response msg -> Task Never (Response msg)
    } -> Program model msg
defineFullProgram app =
    Node.defineProgram <|
        defineFullProgramRecord app


{-| Create a record that can be passed to
[Node.defineProgram](https://packages.gren-lang.org/package/gren-lang/node/version/latest/module/Node#defineProgram)
to define a Prettynice program. For example:

    main =
        Node.defineProgram <|
            Prettynice.defineFullProgramRecord
                { init = init
                , update = update
                , subscriptions = subscriptions
                , router = router
                }

This is a more explicit alternative to (defineFullProgram)[#defineFullProgram].
-}
defineFullProgramRecord :    
    { init : Environment -> Init model msg
    , update : msg -> model -> { model : model, command : Cmd msg }
    , subscriptions : model -> Sub msg
    , router : model -> Request -> Response msg -> Task Never (Response msg)
    } -> 
    { init : Environment -> Init model msg
    , update : Msg model msg -> Model model -> { model : Model model, command : Cmd (Msg model msg) }
    , subscriptions : Model model -> Sub (Msg model msg)
    }
defineFullProgramRecord app =
    { init = app.init
    , update = update { router = app.router, update = app.update }
    , subscriptions = subscriptions app.subscriptions
    }


{-| Start a Prettynice web server. You should call this in your `init` function.

It can be wrapped in one or more calls to 
[Init.await](https://packages.gren-lang.org/package/gren-lang/node/version/latest/module/Init#await)
if you need to run a task or initialize any subsystems before starting.
See [the database example](https://github.com/blaix/prettynice/tree/main/examples/v3/database)
for an example of this.

If you are using [`defineFullProgram`](#defineFullProgram) and want to include a
command as part of your init, you can use [`startFullProgram`](#startFullProgram)
instead.

See `server/src/Main.gren` in the [example projects](https://github.com/blaix/prettynice/tree/main/examples) for how to use this in practice.
-}
startProgram :
    { env : Environment
    , host : String
    , port_ : Int
    , model : model
    } -> Init model msg
startProgram config =
    startFullProgram
        { host = config.host
        , port_ = config.port_
        , env = config.env
        , model = config.model
        , command = Cmd.none
        }


{-| Start a Prettynice web server that includes an init command.

This works just like [`startProgram`](#startProgram) with the addition of a command
field to send a [command](https://gren-lang.org/book/applications/commands/) on init.

See `server/src/Main.gren` in [the bytes example](https://github.com/blaix/prettynice/tree/main/examples/v3/bytes)
for an example usage of `startFullProgram` (it reads a file on init).
-}
startFullProgram :
    { env : Environment
    , host : String
    , port_ : Int
    , model : model
    , command : Cmd msg
    } -> Init model msg
startFullProgram  config =
    Init.await Http.initialize <| \serverPermission ->
    Init.await FileSystem.initialize <| \fsPermission ->
        Node.startProgram <|
            startFullProgramRecord
                { env = config.env
                , host = config.host
                , port_ = config.port_
                , model = config.model
                , command = config.command
                , permissions =
                    { fileSystem = fsPermission
                    , server = serverPermission
                    }
                }


{-| Create a record that can be passed to [Node.startProgram](https://packages.gren-lang.org/package/gren-lang/node/version/latest/module/Node#startProgram)
to start a Prettynice program. For example:


    init env =
        Init.await FilesSystem.initialize <| \fsPermission ->
        Init.await HttpServer.initialize <| \serverPermission ->
            Node.startProgram <|
                Prettynice.startFullProgramRecord
                    { env = env
                    , host = "localhost"
                    , port_ = 3000
                    , model = {}
                    , command = Cmd.none
                    , permissions =
                        { server = serverPermission
                        , fileSystem = fsPermission
                        }
                    }


This is a more explicit alternative to (startFullProgram)[#startFullProgram]
and a way to guarantee Prettynice only has access to the subsystems you are
explicitly providing.
-}
startFullProgramRecord :
    { host : String
    , port_ : Int
    , env : Environment
    , model : model
    , command : Cmd msg
    , permissions :
        { fileSystem : FileSystem.Permission
        , server : Http.Permission
        }
    } ->
    { model : Model model
    , command : Cmd (Msg model msg)
    }
startFullProgramRecord config =
    { model =
        { server = Nothing
        , stdout = config.env.stdout
        , stderr = config.env.stderr
        , host = config.host
        , port_ = config.port_
        , env = config.env
        , appModel = config.model
        , fsPermission = config.permissions.fileSystem
        }
    , command =
        Cmd.batch
            [ Cmd.map MsgToApp config.command
            , Task.attempt CreateServerResult <|
                Http.createServer config.permissions.server
                    { host = config.host
                    , port_ = config.port_
                    }
            ]
    }


-- UPDATE


type Msg appModel appMsg
    = CreateServerResult (Result Http.ServerError Http.Server)
    | GotRequest { request : Http.Request, response : HttpResponse.Response }
    | ResponseReady (Response appMsg)
    | MsgToApp appMsg


makeGotRequestMsg : Http.Request -> HttpResponse.Response -> Msg appModel appMsg
makeGotRequestMsg request response =
    GotRequest
        { request = request
        , response = response
        }


type alias AppUpdate appModel appMsg =
    appMsg -> appModel -> { model : appModel, command : Cmd appMsg }


update : 
    { router : appModel -> Request -> Response appMsg -> Task Never (Response appMsg)
    , update : AppUpdate appModel appMsg
    }
    -> Msg appModel appMsg
    -> Model appModel
    -> { model : Model appModel, command : Cmd (Msg appModel appMsg) }
update appUpdate msg model =
    when msg is
        CreateServerResult result ->
            when result is
                Ok server ->
                    { model = { model | server = Just server }
                    , command = 
                        print model.stdout <|
                            "Server started on http://" ++ model.host ++ ":" ++ String.fromInt model.port_
                    }
                Err (ServerError { code, message }) ->
                    { model = model
                    , command = 
                        print model.stderr <|
                            "Server failed to start: " ++ code ++ "\n" ++ message
                    }
        
        GotRequest { request = req, response = res } ->
            let
                request = 
                    Prettynice.Request.new req

                response =
                    Prettynice.Response.new res

                appResponseTask =
                    appUpdate.router model.appModel request response
                        |> logSuccess model.stdout req "sending to router"

                tryStaticResponse =
                    req.url
                        |> Static.response
                            { fileSystemPermission = model.fsPermission
                            , httpResponse = res
                            , directory = "./dist/client"
                            , mode = Normal
                            }
                        |> Task.map Prettynice.Response.new
                        |> logSuccess model.stdout req "sending static file"
            in
            { model = model
            , command =
                tryStaticResponse
                    |> Task.onError (\_ -> appResponseTask)
                    |> Task.perform ResponseReady
            }

        ResponseReady response ->
            let
                (Internal.Response { httpResponse, appMsg }) =
                    response

                msgToApp =
                    when appMsg is
                        Just m ->
                            Task.succeed m
                                |> Task.perform MsgToApp

                        Nothing ->
                            Cmd.none
            in
            { model = model
            , command = 
                Cmd.batch
                    [ HttpResponse.send httpResponse
                    , msgToApp
                    ]
            }

        MsgToApp appMsg ->
            let
                appUpdateReturn =
                    appUpdate.update appMsg model.appModel
            in
            { model = { model | appModel = appUpdateReturn.model }
            , command = Cmd.map MsgToApp appUpdateReturn.command
            }


{-| Log a request with a custom message if task succeeds.
-}
logSuccess : Stream.Writable Bytes -> Http.Request -> String -> Task x a -> Task x a
logSuccess stream request message task =
    let
        fullMessage =
            Http.requestInfo request ++ " : " ++ message

        printMsg =
            Stream.writeLineAsBytes fullMessage stream
                |> Task.onError (\_ -> Task.succeed stream)
    in
    task
        |> Task.andThen
            (\a ->
                printMsg
                    |> Task.map (\_ -> a)
            )


-- SUBS


subscriptions : (appModel -> Sub appMsg) -> Model appModel -> Sub (Msg appModel appMsg)
subscriptions appSubs model =
    when model.server is
        Just server ->
            Sub.batch
                [ Http.onRequest server makeGotRequestMsg
                , Sub.map MsgToApp <| appSubs model.appModel
                ]

        Nothing ->
            Sub.none


-- UTIL


print : Stream.Writable Bytes -> String -> Cmd (Msg appModel appMsg)
print stream string =
    Stream.writeLineAsBytes string stream
        |> Task.onError (\_ -> Task.succeed stream)
        |> Task.execute
