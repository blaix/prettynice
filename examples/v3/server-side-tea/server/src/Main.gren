module Main exposing (main)

import Init
import Node exposing (Environment)
import Prettynice
import Prettynice.Request exposing (Request)
import Prettynice.Response as Response exposing (Response)
import Task exposing (Task)
import Time
import Transmutable.Html as H exposing (Html)
import Transmutable.Html.Attributes as A


main : Prettynice.Program Model Msg
main =
    Prettynice.defineProgram
        { init = init
        , router = router
        , update = update
        , subscriptions = subscriptions
        }


-- MODEL


type alias Model =
    { time : Time.Posix
    , zone : Time.Zone
    }



init : Environment -> Prettynice.Init Model Msg
init env =
    Init.awaitTask Time.here <| \zone ->
    Init.awaitTask Time.now <| \time ->
        Prettynice.startProgram
            { env = env
            , host = "127.0.0.1"
            , port_ = 3000
            , model = { time = time, zone = zone }
            , command = Cmd.none
            }


-- ROUTER


router : Model -> Request -> Response -> Task Never Response
router model request response =
    response
        |> Response.asHtml (viewTimePage model)
        |> Task.succeed


viewTimePage : Model -> { title : String, head : Array (Html Msg), body :Array (Html Msg) }
viewTimePage model =
    { title = "Time Viewer"
    , head = []
    , body =
        [ H.h1 [] [ H.text "Current Time" ]
        , H.text (timeToString model)
        ]
    } 


timeToString : Model -> String
timeToString model =
    [ Time.toHour model.zone model.time
    , Time.toMinute model.zone model.time
    , Time.toSecond model.zone model.time
    ]
       |> Array.map String.fromInt
       |> Array.map (String.padLeft 2 '0')
       |> String.join ":"


-- UPDATE


type Msg
    = GotTime Time.Posix


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        GotTime time ->
            { model = { model | time = time }
            , command = Cmd.none
            }


subscriptions : Model -> Sub Msg
subscriptions _ =
    Time.every 1000 GotTime
