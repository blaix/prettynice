port module Main exposing (main)

import Args
import Bytes exposing (Bytes)
import Bytes.Decode
import ChildProcess
import CodeGen
import Dict
import FileSystem
import FileSystem.Path
import Init
import Node
import Stream exposing (Stream)
import Task exposing (Task)


main : Node.Program Model Msg
main =
    Node.defineProgram 
        { init = init
        , update = update
        , subscriptions = subscriptions
        }


-- MODEL


type alias Model =
    { fsPermission : FileSystem.Permission
    , procPermission : ChildProcess.Permission
    , stdin : Stream
    , stdout : Stream
    , stderr : Stream
    , optimize : Bool
    , readInput : Maybe (Bytes -> Msg)
    , dirname : Maybe String
    }


init : Node.Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Init.await FileSystem.initialize <| \fsPermission ->
        Init.await ChildProcess.initialize <| \procPermission ->
            let
                model = 
                    { fsPermission = fsPermission
                    , procPermission = procPermission
                    , stdin = env.stdin
                    , stdout = env.stdout
                    , stderr = env.stderr
                    , optimize = Array.member "--optimize" env.args
                    , readInput = Nothing
                    , dirname = Nothing
                    }
            in
            env.args
                -- First two arguments are always "node" and the filename
                |> Array.dropFirst 2
                |> Args.parse
                |> run model
                |> Node.startProgram


-- RUN


run : Model -> Args.Result -> { model : Model, command: Cmd Msg }
run model { args, options } =
    if args == [ "version" ] || Dict.member "v" options || Dict.member "version" options then
        { model = model
        , command = getVersion {}
        }

    else if args == [ "build" ] then
        { model = model
        , command = runBuild model
        }

    else if args == [ "init" ] then
        { model = { model | readInput = Just GenProject_Confirmation }
        , command = 
            Stream.sendString model.stdout
                "ó±š¤ Can I turn the current directory into a new Prettynice project (y|n)? "
                    |> Task.execute
        }

    else if args == [] then
        { model = model
        , command = 
            Stream.sendLine model.stdout help
                |> Task.execute
        }
    
    else
        { model = model
        , command =
            Stream.sendLine model.stderr "I don't recognize those arguments."
                |> Task.andThen (\_ -> Stream.sendLine model.stderr help)
                |> Task.andThen (\_ -> Node.setExitCode 1)
                |> Task.execute
        }


help : String
help = 
    """
    Usage:
        
        prettynice init
            Create a new prettynice project in the current directory.

        prettynice build
            Compile the web app into javascript under dist/

        prettynice build --optimize
            Compile the web app with optimizations enabled.

        prettynice [version|-v|--version]
            Print the version number of this prettynice cli.

        prettynice [--help|-h]
            Show this help text.
    """


runBuild : Model -> Cmd Msg
runBuild model =
    Cmd.batch
        [ progress model.stdout "Cleaning up previous builds"
        , clean model.fsPermission |> Task.attempt Cleaned
        ]


-- UPDATE


type Msg
    = Cleaned (Result FileSystem.Error {})
    | GeneratedDependencies (Result CodeGen.Error CodeGen.Result)
    | GeneratedServerComponents (Result CodeGen.Error CodeGen.Result)
    | GeneratedClientComponents (Result CodeGen.Error CodeGen.Result)
    | GeneratedServerPorts (Result CodeGen.Error CodeGen.Result)
    | GeneratedClientPorts (Result CodeGen.Error CodeGen.Result)
    | CopiedPublicAssets (Result CodeGen.Error CodeGen.Result)
    | BuiltClientComponents (Result ComponentBuildError ComponentBuildSuccess)
    | BuiltServer (Result ChildProcess.FailedRun ChildProcess.SuccessfulRun)
    | GenProject_Confirmation Bytes
    | GenProject_Created (Result CodeGen.Error CodeGen.Result)
    | GenProject_NpmInstalled (Result ChildProcess.FailedRun ChildProcess.SuccessfulRun)
    | GotDirname String
    | GotVersion String


type ComponentBuildError
    = ComponentBuildFailed ChildProcess.FailedRun
    | ListComponentsFailed String


type ComponentBuildSuccess
    = ComponentBuildSucceeded ChildProcess.SuccessfulRun
    | NoComponents


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        GotDirname dirname ->
            { model = { model | dirname = Just dirname }
            , command = Cmd.none
            }

        GotVersion version ->
            { model = model
            , command = 
                Stream.sendLine model.stdout version
                    |> Task.execute
            }

        Cleaned result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Generating prettynice dependencies"
                            , CodeGen.genDependencies model.fsPermission
                                |> Task.attempt GeneratedDependencies
                            ]

                    Err e ->
                        fileSystemError model.stderr e
            }
                        
        GeneratedDependencies result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Generating server components"
                            , CodeGen.genServerComponents model.fsPermission
                                |> Task.attempt GeneratedServerComponents
                            ]

                    Err e ->
                        codeGenError model.stderr e
            }

        GeneratedServerComponents result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Generating client components"
                            , Task.attempt GeneratedClientComponents <|
                                CodeGen.genClientComponents model.fsPermission
                            ]

                    Err e ->
                        codeGenError model.stderr e
            }

        GeneratedClientComponents result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Generating server ports"
                            , Task.attempt GeneratedServerPorts <|
                                CodeGen.genServerPorts model.fsPermission
                            ]

                    Err e ->
                        codeGenError model.stderr e
            }

        GeneratedServerPorts result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Generating client ports"
                            , Task.attempt GeneratedClientPorts <|
                                CodeGen.genClientPorts model.fsPermission
                            ]

                    Err e ->
                        codeGenError model.stderr e
            }

        GeneratedClientPorts result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            -- TODO: replace with vite / bundler / something...
                            [ progress model.stdout "Copying public assets"
                            , Task.attempt CopiedPublicAssets <|
                                CodeGen.copyPublicAssets model.fsPermission
                            ]

                    Err e ->
                        codeGenError model.stderr e
            }

        CopiedPublicAssets result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Building client components"
                            , Task.attempt BuiltClientComponents <|
                                buildClientComponents model.fsPermission model.procPermission model.optimize
                            ]

                    Err e ->
                        codeGenError model.stderr e
            }

        BuiltClientComponents result ->
            { model = model
            , command =
                case result of
                    Ok success ->
                        Cmd.batch
                            [ case success of
                                NoComponents ->
                                    Stream.sendLine model.stdout "No components to build"
                                        |> Task.execute
                                ComponentBuildSucceeded s ->
                                    Stream.send model.stdout s.stdout
                                        |> Task.execute
                            , progress model.stdout "Building server"
                            , Task.attempt BuiltServer <|
                                buildServer model.procPermission model.optimize
                            ]

                    Err (ComponentBuildFailed failure) ->
                        failure.stderr
                            |> Bytes.toString
                            |> Maybe.withDefault "Unknown error building client components"
                            |> endWithErrorMessage model.stderr

                    Err (ListComponentsFailed message) ->
                        endWithErrorMessage model.stderr message
            }

        BuiltServer result ->
            { model = model
            , command =
                case result of
                    Ok success ->
                        Stream.send model.stdout success.stdout
                            |> Task.andThen (\_ -> Stream.sendLine model.stdout "âœ… Done")
                            |> Task.execute

                    Err error ->
                        error.stderr
                            |> Bytes.toString
                            |> Maybe.withDefault "Unknown error building server"
                            |> endWithErrorMessage model.stderr
            }

        GenProject_Confirmation bytes ->
            let
                answer =
                    bytes
                        |> Bytes.toString
                        |> Maybe.withDefault ""
                        |> String.trim
            in
            { model = { model | readInput = Nothing }
            , command =
                if answer == "y" || answer == "yes" then
                    Cmd.batch
                        [ progress model.stdout "Generating project"
                        , case model.dirname of
                            Just dir ->
                                Task.attempt GenProject_Created <|
                                    CodeGen.genProject model.fsPermission dir
                            Nothing ->
                                endWithErrorMessage 
                                    model.stderr
                                    "Can't find path to current executable."
                        ]
                else
                    Cmd.none
            }

        GenProject_Created result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Installing dependencies"
                            , Task.attempt GenProject_NpmInstalled <|
                                ChildProcess.runWithDefaultOptions
                                    model.procPermission "npm" [ "install" ]
                            ]

                    Err e ->
                        codeGenError model.stderr e
            }

        GenProject_NpmInstalled result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Stream.sendLine model.stdout 
                            """
                            âœ… Done!
                            
                            Now what?
                            * Start the dev server with: npm run dev
                            * Make changes to your server at: server/src/Main.gren
                            * View examples at: https://github.com/blaix/prettynice/tree/main/examples
                            """
                                |> Task.execute

                    Err error ->
                        error.stderr
                            |> Bytes.toString
                            |> Maybe.withDefault "Unknown error installing dependencies"
                            |> endWithErrorMessage model.stderr
            }


clean : FileSystem.Permission -> Task FileSystem.Error {}
clean fsPermission =
    let
        remove path =
            FileSystem.remove
                fsPermission
                { recursive = True, ignoreErrors = True }
                (FileSystem.Path.fromPosixString path)

        create path =
            FileSystem.makeDirectory
                fsPermission
                { recursive = True }
                (FileSystem.Path.fromPosixString path)

        recreate path =
            remove path
                |> Task.andThen (\_ -> create path)
    in
    [ "./dist"
    , "client/.prettynice"
    , "server/.prettynice"
    ]
        |> Array.map recreate
        |> Task.sequence
        |> Task.map (\_ -> {})


buildClientComponents :
    FileSystem.Permission
    -> ChildProcess.Permission
    -> Bool
    -> Task ComponentBuildError ComponentBuildSuccess
buildClientComponents fsPermission procPermission optimize =
    let
        workingDirectory =
            "./client"

        outputPath =
            "../dist/client/main.js"

        optimizeFlag =
            if optimize then
                "--optimize"
            else
                ""

        runOptions =
            { ChildProcess.defaultRunOptions 
                | workingDirectory = 
                    ChildProcess.SetWorkingDirectory workingDirectory
            }

        buildComponents components =
            if components == "" then
                Task.succeed NoComponents
            else
                ChildProcess.run procPermission "npx" 
                    [ "gren"
                    , "make"
                    , components
                    , optimizeFlag
                    , "--output=" ++ outputPath
                    ]
                    runOptions
                    |> Task.map ComponentBuildSucceeded
                    |> Task.mapError ComponentBuildFailed
    in
    CodeGen.generatedComponentPaths fsPermission
        |> Task.mapError (CodeGen.errorString >> ListComponentsFailed)
        |> Task.map (String.join " ")
        |> Task.andThen buildComponents


buildServer :
    ChildProcess.Permission 
    -> Bool
    -> Task ChildProcess.FailedRun ChildProcess.SuccessfulRun
buildServer procPermission optimize =
    let
        workingDirectory =
            "./server"

        inputPath =
            "./src/Main.gren"

        outputPath =
            "../dist/server/main.js"

        optimizeFlag =
            if optimize then
                "--optimize"
            else
                ""
    in
    ChildProcess.run procPermission "npx"
        [ "gren", "make", inputPath, optimizeFlag, "--output=" ++ outputPath ]
        { ChildProcess.defaultRunOptions 
            | workingDirectory = 
                ChildProcess.SetWorkingDirectory workingDirectory
        }


codeGenError : Stream -> CodeGen.Error -> Cmd Msg
codeGenError stream error =
    endWithErrorMessage stream (CodeGen.errorString error)


fileSystemError : Stream -> FileSystem.Error -> Cmd Msg
fileSystemError stream error =
    endWithErrorMessage stream <|
        FileSystem.errorToString error


endWithErrorMessage : Stream -> String -> Cmd Msg
endWithErrorMessage stream message =
    Stream.sendLine stream ("ðŸš¨ " ++ message ++ "\n")
        |> Task.andThen (\_ -> Node.setExitCode 1)
        |> Task.execute


progress : Stream -> String -> Cmd Msg
progress stream message =
    Stream.sendLine stream ("ðŸŒ¸ " ++ message ++ "...")
        |> Task.execute



-- SUBS


port getVersion : {} -> Cmd msg
port gotVersion : (String -> msg) -> Sub msg
port gotDirname : (String -> msg) -> Sub msg


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.batch
        [ gotDirname GotDirname
        , gotVersion GotVersion
        , case model.readInput of
            Just msg ->
                Stream.listen model.stdin msg

            Nothing ->
                Sub.none
        ]
