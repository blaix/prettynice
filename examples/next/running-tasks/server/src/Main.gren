module Main exposing (main)

import Bytes exposing (Bytes) 
import Bytes.Decode as Decode
import Init
import FileSystem
import FileSystem.FileHandle as FileHandle
import FileSystem.Path as Path
import Node exposing (Environment)
import Prettynice
import Prettynice.Request exposing (Request)
import Prettynice.Response as Response exposing (Body(..), Response)
import Task exposing (Task)


type alias Model =
    { fsPermission : FileSystem.Permission }


main : Prettynice.Program Model Msg
main =
    Prettynice.defineProgram
        { init = init
        , update = update
        , subscriptions = (\_ -> Sub.none)
        , onRequest = GotRequest
        }


init : Environment -> Prettynice.Init Model Msg
init env =
    Init.await FileSystem.initialize <| \fsPermission ->
        Prettynice.startProgram
            { host = "127.0.0.1"
            , port_ = 3000
            , env = env
            , command = Cmd.none
            , model = 
                { fsPermission = fsPermission }
            }


type FileError
    = FileSystemError FileSystem.Error
    | DecodeError


type Msg
    = GotRequest Request Response
    | GotReadResult Response (Result FileError String)


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        GotRequest request response ->
            { model = model
            , command =
                open model.fsPermission "./test.txt"
                    |> Task.andThen read
                    |> Task.andThen decode
                    |> Task.attempt (GotReadResult response)
            }

        GotReadResult response (Ok fileContents) ->
            { model = model
            , command =
                response
                    |> Response.sendText
                        ("File contents: " ++ fileContents)
            }

        GotReadResult response (Err e) ->
            { model = model
            , command =
                response
                    |> Response.setStatus 500
                    |> Response.sendText
                        ("Failed to read file: " ++ Debug.toString e)
            }


open : FileSystem.Permission -> String -> Task FileError (FileHandle.ReadableFileHandle Never)
open fsPermission fname =
    fname
        |> Path.fromPosixString
        |> FileHandle.openForRead fsPermission
        |> Task.mapError FileSystemError


read : FileHandle.ReadableFileHandle a -> Task FileError Bytes
read file =
    FileHandle.read file
        |> Task.mapError FileSystemError


decode : Bytes -> Task FileError String
decode bytes =
    case Bytes.toString bytes of
        Just string ->
            Task.succeed string

        Nothing ->
            Task.fail DecodeError
