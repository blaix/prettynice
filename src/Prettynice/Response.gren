module Prettynice.Response exposing 
    ( Response
    , Body(..)
    , new
    , send
    , sendText
    , sendHtml
    , sendJson
    , sendBytes
    , withBody
    , withText
    , withHtml
    , withJson
    , withBytes
    , withHeader
    , withStatus
    ) 


{-| HTTP Responses

@docs withHtml, withJson, withText, withBytes, withStatus, withHeader, withBody

@docs send, sendHtml, sendText, sendJson, sendBytes

@docs Response, Body, new
-}

import Bytes exposing (Bytes)
import HttpServer.Response as Http
import Prettynice.Request exposing (Request)
import Json.Encode
import Task exposing (Task)
import Transmutable.Html as H exposing (Html)
import Transmutable.Html.Attributes as A


{-| An HTTP response value.
-}
type Response
    = Response Http.Response


{-| Custom type for response bodies.
-}
type Body msg
    = HtmlBody 
        { title : String
        , head : Array (Html msg)
        , body : Array (Html msg)
        }
    | BytesBody Bytes
    | JsonBody Json.Encode.Value
    | TextBody String


{-| Internal representation of body is either a String or Bytes
-}
type RawBody
    = RawBodyString String
    | RawBodyBytes Bytes


{-| Turn a [Node HttpServer Response](https://packages.gren-lang.org/package/gren-lang/node/version/3.1.0/module/HttpServer.Response#Response)
into a Prettynice Response.

You shouldn't need this in your normal application code.
The response you get in a Prettynice request message is already a Prettynice Response.
-}
new : Http.Response -> Response
new httpResponse =
    Response httpResponse


{-| Send a Response as a Cmd for the current request.
-}
send : Response -> Cmd a
send response =
    response
        |> getHttpResponse
        |> Http.send


{-| Respond with raw bytes.

Use this to send binary data like files, images, etc.

If you want to update a response to send bytes without turning it into a command,
see [`withBytes`](#withBytes).
-}
sendBytes : { contentType : String, body : Bytes } -> Response -> Cmd a
sendBytes bytesConfig response =
    response
        |> withBytes bytesConfig
        |> send


{-| Update a response to send raw bytes.

Use this to send binary data like files, images, etc.
-}
withBytes : { contentType : String, body : Bytes } -> Response -> Response
withBytes { contentType, body } response =
    response
        |> withBody (BytesBody body)
        |> withHeader "Content-type" contentType


{-| Respond with plain text.

If you want to update a response to send text without turning it into a command,
see [`withText`](#withText).
-}
sendText : String -> Response -> Cmd a
sendText text response =
    response
        |> withText text
        |> send


{-| Update a response to send plain text.
-}
withText : String -> Response -> Response
withText text =
    withBody (TextBody text)


{-| Respond with Json.

If you want to update a response to send json without turning it into a command,
see [`withJson`](#withJson).
-}
sendJson : Json.Encode.Value -> Response -> Cmd a
sendJson json response =
    response
        |> withJson json
        |> send


{-| Update a response to send json.
-}
withJson : Json.Encode.Value -> Response -> Response
withJson json =
    withBody (JsonBody json)


{-| Respond with HTML.

`title` will go into the `<title>` tag,
`head` will be added to the `<head>` tag,
and `body` will go into the `<body>` tag.

Note that Prettynice uses and expects Html from [icidasset/html-gren](https://packages.gren-lang.org/package/icidasset/html-gren),
not from gren-lang/browser. The API is the same, but html-gren is needed because it supports server-side rendering.

If you want to update a response to send HTML without turning it into a Cmd,
see [`withHtml`](#withHtml).
-}
sendHtml : 
    { title : String, head : Array (Html msg), body : Array (Html msg) } 
    -> Response 
    -> Cmd msg
sendHtml html response =
    response
        |> withHtml html
        |> send


{-| Update a response to send HTML.

`title` will go into the `<title>` tag,
`head` will be added to the `<head>` tag,
and `body` will go into the `<body>` tag.

Note that Prettynice uses and expects Html from [icidasset/html-gren](https://packages.gren-lang.org/package/icidasset/html-gren),
not from gren-lang/browser. The API is the same, but html-gren is needed because it supports server-side rendering.
-}
withHtml :
    { title : String, head : Array (Html msg), body : Array (Html msg) } 
    -> Response 
    -> Response
withHtml html =
    withBody (HtmlBody html)


{-| Set the body of the response directly.

Normally you can use one of the `send*` functions,
but if you need more control, you can set a [`Body`](#Body) directly.
-}
withBody : Body msg -> Response -> Response
withBody bodyVariant response =
    let
        { contentType, rawBody } =
            case bodyVariant of
                HtmlBody { title, head, body } ->
                    { contentType = "text/html"
                    , rawBody = RawBodyString <|
                        ( H.toString H.doctype ) ++ 
                        ( H.toString
                            ( H.html [ A.lang "en" ]
                                [ H.head []
                                    ( [ H.meta [ A.charset "utf-8" ]
                                      , H.meta [ A.name "viewport", A.content "width=device-width, initial-scale=1.0" ]
                                      , H.node "script" [ A.src "/main.js" ] []
                                      , H.title [ H.text title ]
                                      ] ++ head
                                    )
                                , H.body [] <|
                                    body ++
                                    [ H.node "script" []
                                        [ H.text <|
                                            """
                                            if (typeof($__components) !== 'undefined') {
                                                Object.keys($__components).map((name) => {
                                                    let path = name.replace(/\\./g, '/');
                                                    import("/" + path + ".js").then((mod) => {
                                                        if (mod.init) {
                                                            $__components[name].map((comp) => {
                                                                mod.init(comp);
                                                            });
                                                        }
                                                    });
                                                });
                                            }
                                            """
                                        ]
                                    ]
                                ]
                            )
                        )
                    }

                JsonBody json ->
                    { contentType = "application/json"
                    , rawBody = RawBodyString <| Json.Encode.encode 2 json 
                    }

                TextBody text ->
                    { contentType = "text/plain"
                    , rawBody = RawBodyString text
                    }

                BytesBody bytes ->
                    { contentType = "application/octet-stream"
                    , rawBody = RawBodyBytes bytes
                    }
    in
    response
        |> getHttpResponse
        |> Http.setHeader "Content-type" contentType
        |> ( case rawBody of
                RawBodyString body ->
                    Http.setBody body
                RawBodyBytes body ->
                    Http.setBodyAsBytes body
            )
        |> new


{-| Add a header to the response.
-}
withHeader : String -> String -> Response -> Response
withHeader key val (Response httpResponse) =
    httpResponse
        |> Http.setHeader key val
        |> Response
    

{-| Set the status of the response.
-}
withStatus : Int -> Response -> Response
withStatus status (Response httpResponse) =
    httpResponse
        |> Http.setStatus status
        |> Response


getHttpResponse : Response -> Http.Response
getHttpResponse (Response httpResponse) =
    httpResponse
