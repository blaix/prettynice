module Prettynice.SimpleRouter exposing 
 ( Program
 , Config
 , Init
 , defineProgram
 , startProgram
 )


{-| An HTTP server program that routes requests to simple responses.

A router is a function that takes a [`Request`](Prettynice.Request#Request)
and a [`Response`](Prettynice.Response) and returns a command to
[send](Prettynice.Response#send) the response.

Typically you will use [`defineProgram`](#defineProgram) in your `main`,
and [`startProgram`](#startProgram) in your `init`. See below for details.

See [examples/next/routing](https://github.com/blaix/prettynice/blob/main/examples/next/routing)
for a full working example.

**Note:** If you need more control over your program (e.g. you need
[ports](https://github.com/blaix/prettynice/tree/main/examples/next/server-side-ports),
or want to [run a task before responding](https://github.com/blaix/prettynice/tree/main/next/examples/next/running-tasks))
you will want to use the [`Prettynice`](Prettynice) module instead.

## Defining your router

@docs defineProgram, Program

## Starting your router

@docs startProgram, Config, Init
-}

import FileSystem
import HttpServer as Http exposing (ServerError(..), Method(..))
import HttpServer.Response as HttpResponse 
import Init
import Node exposing (Environment, Program)
import Prettynice.Request exposing (Request)
import Prettynice.Response exposing (Response)
import Server.Static as Static exposing (Mode(..))
import Stream exposing (Stream)
import Task exposing (Task)
import Transmutable.Html as H
import Transmutable.Html.Attributes as A
import Url exposing (Url)


{-| The definition of your router program.
-}
type alias Program =
    Node.Program Model Msg


{-| The task that starts your router program.
It should be returned from your `init` function.

You will get this from [`startProgram`](#startProgram), which you can wrap in an
[`await`](https://packages.gren-lang.org/package/gren-lang/node/version/3.1.0/module/Init#await)
if you need to initialize other subsystems (see the 
[running-tasks example](https://github.com/blaix/prettynice/blob/main/examples/next/running-tasks/server/src/Main.gren)
for an example of this).
-}
type alias Init =
    Init.Task { model : Model, command : Cmd Msg }
 

type alias Model =
    { server : Maybe Http.Server
    , stdout : Stream
    , stderr : Stream
    , host : String
    , port_ : Int
    , env : Environment
    , fsPermission : FileSystem.Permission
    }


{-| Application config. You will pass this to [`startProgram`](#startProgram).
-}
type alias Config =
    { host : String
    , port_ : Int
    , env : Environment
    }


{-| Define your router program.

This will give you a [`Program`](#Program) that you can return from your `main`
function.

If you need a full model/update/view cycle, see the
[`Prettynice`](Prettynice.SimpleRouter) module instead.
-}
defineProgram :
    { init : Environment -> Init
    , router : Request -> Response -> Cmd Msg
    } -> Program
defineProgram app =
    Node.defineProgram
        { init = app.init
        , update = update app.router
        , subscriptions = subscriptions
        }


{-| Start your router program!

This creates the startup task you can return from your `init` function.
-}
startProgram : Config -> Init
startProgram config =
    Init.await Http.initialize <| \serverPermission ->
        Init.await FileSystem.initialize <| \fsPermission ->
            Node.startProgram
                { model =
                    { server = Nothing
                    , stdout = config.env.stdout
                    , stderr = config.env.stderr
                    , host = config.host
                    , port_ = config.port_
                    , env = config.env
                    , fsPermission = fsPermission
                    }
                , command =
                    Task.attempt CreateServerResult <|
                        Http.createServer serverPermission
                            { host = config.host
                            , port_ = config.port_
                            }
                }


type Msg
    = CreateServerResult (Result Http.ServerError Http.Server)
    | GotRequest Http.Request HttpResponse.Response
    | ResponseReady (Cmd Msg)


update : 
   (Request -> Response -> Cmd Msg)
    -> Msg
    -> Model
    -> { model : Model, command : Cmd Msg }
update router msg model =
    case msg of
        CreateServerResult result ->
            case result of
                Ok server ->
                    { model = { model | server = Just server }
                    , command = 
                        Task.execute <|
                            Stream.sendLine model.stdout <|
                                "Server started on http://" ++ model.host ++ ":" ++ String.fromInt model.port_
                    }
                Err (ServerError code message) ->
                    { model = model
                    , command = 
                        Task.execute <|
                            Stream.sendLine model.stderr <|
                                "Server failed to start: " ++ code ++ "\n" ++ message
                    }
        
        GotRequest req res ->
            let
                request = 
                    Prettynice.Request.new req

                response =
                    Prettynice.Response.new res

                appResponseTask =
                    Task.succeed <|
                        Cmd.batch
                            [ Task.execute <|
                                Stream.sendLine model.stdout <|
                                    Http.requestInfo req ++ ": routing to app"
                            , router request response
                            ]

                tryStaticResponse =
                    Static.response
                        { fileSystemPermission = model.fsPermission
                        , httpResponse = res
                        , directory = "./dist/client"
                        , mode = Normal
                        }
                        req.url
                        |> Task.map 
                            (\staticResponse ->
                                Cmd.batch
                                    [ Task.execute <|
                                        Stream.sendLine model.stdout <|
                                            Http.requestInfo req ++ ": responding with static file"
                                    , HttpResponse.send staticResponse
                                    ]
                            )
            in
            { model = model
            , command = 
                    tryStaticResponse
                        |> Task.onError (\_ -> appResponseTask)
                        |> Task.perform ResponseReady
            }

        ResponseReady cmd ->
            { model = model
            , command = cmd
            }


-- SUBS


subscriptions : Model -> Sub Msg
subscriptions model =
    case model.server of
        Just server ->
            Http.onRequest server GotRequest

        Nothing ->
            Sub.none
